#################################################

A Entrega Contínua e todos os conceitos e práticas relacionados são bastante discutidos na literatura e web em geral, devido a sua importância.

Seguem algumas fontes que usamos para criar este curso:

- Livro Continuous Delivery, do Jez Humble -> https://www.amazon.com.br/Continuous-Delivery-Deployment-Automation-Addison-Wesley-ebook/dp/B003YMNVC0
- Livro DevOps Handbook, do Gene Kim -> https://www.amazon.com.br/DevOps-Handbook-World-Class-Reliability-Organizations-ebook/dp/B01M9ASFQ3/
- Livro DevOps, da Casa do Código, do Danilo Sato -> https://www.casadocodigo.com.br/products/livro-devops

- Artigo da ThoughtWorks: Continuous integration -> https://www.thoughtworks.com/pt/continuous-integration
- Série de artigos do Martin Fowler sobre Entrega Contínua: Software Delivery Guide -> https://martinfowler.com/delivery.html
- Série de artigos da Caelum:
	- Branches e integração contínua: o problema de feature branches -> https://blog.caelum.com.br/branches-e-integracao-continua-o-problema-de-feature-branches/
	- Integração Contínua - Builds rápidos com Grids e paralelismo -> https://blog.caelum.com.br/integracao-continua-builds-rapidos-com-grids-e-paralelismo/
	- Integração contínua: deploys e aprovações sem dor de cabeça para o cliente -> https://blog.caelum.com.br/integracao-continua-deploys-e-aprovacoes-sem-dores-de-cabeca-para-o-cliente/

- Artigos sobre Entrega Contínua e padrões relacionados, do Jez Humble -> https://continuousdelivery.com/

#################################################

Diminuindo risco

Não devemos fazer o deploy ser um evento raro e demorado, mas sim um processo natural e frequente no projeto.

Devemos lembrar que a prioridade número um de uma equipe é deixar o cliente satisfeito, com um projeto funcional e com entrega contínua carregada de valor.

Devemos, portanto, realizar deploys frequentes e preferencialmente automatizados e com feedbacks rápidos, como manda o processo ágil. 

Parece simples, mas esse pipeline apresenta dificuldades reais de implementação dentro de ambientes empresariais. Geralmente temos uma equipe múltipla envolvida na construção de um projeto e que atuam de maneira muito diferente, e isso pode gerar ruídos.

Por isso o DevOps é importante, criar um ambiente de trabalho colaborativo e ágil. Trata-se de uma modificação cultural muito mais do que implementação de ferramentas.

- feedback contínuo
- melhoria contínua
- aprendizagem contínua

Existem três livros interessantes que podemos citar como referência:

Continuous Delivery, Jez Humble e David Farley
DevOps HandBook, múltiplos autores
DevOps, Casa do Código

#################################################

Release Antipatterns

Antipatterns
	1- Gerenciamento manual de ambientes -> Resultado: Deploy não confiável)
	Regra - Todos os ambientes são tratados como código, versionados e criados de maneira automarizada.
	2- Deploy manual -> Resultado: Deploy lento, propício a erro, não confiável
	Regra - Duas tarefas devem ser executadas manualmente:
				1- escolher a versão do release
				2- click no "deploy button"
	3- Deploy apenas no fim do ciclo -> Resultado: pouca colaboração, problemas só aparecem no dia da publicação, não confiável nem rápido, achismo
	Regra - deployment faz parte do desenvolvimento desde a primeira iteração, todos definem um delivery team

Devemos portanto ter:

Gerenciamento automatizado de ambientes
Deploy automatizado
Deploy frequente em cada ciclo de desenvolvimento

#################################################