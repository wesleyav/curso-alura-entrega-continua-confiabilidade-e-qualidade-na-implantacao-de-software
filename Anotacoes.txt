#################################################

A Entrega Contínua e todos os conceitos e práticas relacionados são bastante discutidos na literatura e web em geral, devido a sua importância.

Seguem algumas fontes que usamos para criar este curso:

- Livro Continuous Delivery, do Jez Humble -> https://www.amazon.com.br/Continuous-Delivery-Deployment-Automation-Addison-Wesley-ebook/dp/B003YMNVC0
- Livro DevOps Handbook, do Gene Kim -> https://www.amazon.com.br/DevOps-Handbook-World-Class-Reliability-Organizations-ebook/dp/B01M9ASFQ3/
- Livro DevOps, da Casa do Código, do Danilo Sato -> https://www.casadocodigo.com.br/products/livro-devops

- Artigo da ThoughtWorks: Continuous integration -> https://www.thoughtworks.com/pt/continuous-integration
- Série de artigos do Martin Fowler sobre Entrega Contínua: Software Delivery Guide -> https://martinfowler.com/delivery.html
- Série de artigos da Caelum:
	- Branches e integração contínua: o problema de feature branches -> https://blog.caelum.com.br/branches-e-integracao-continua-o-problema-de-feature-branches/
	- Integração Contínua - Builds rápidos com Grids e paralelismo -> https://blog.caelum.com.br/integracao-continua-builds-rapidos-com-grids-e-paralelismo/
	- Integração contínua: deploys e aprovações sem dor de cabeça para o cliente -> https://blog.caelum.com.br/integracao-continua-deploys-e-aprovacoes-sem-dores-de-cabeca-para-o-cliente/

- Artigos sobre Entrega Contínua e padrões relacionados, do Jez Humble -> https://continuousdelivery.com/

#################################################

Diminuindo risco

Não devemos fazer o deploy ser um evento raro e demorado, mas sim um processo natural e frequente no projeto.

Devemos lembrar que a prioridade número um de uma equipe é deixar o cliente satisfeito, com um projeto funcional e com entrega contínua carregada de valor.

Devemos, portanto, realizar deploys frequentes e preferencialmente automatizados e com feedbacks rápidos, como manda o processo ágil. 

Parece simples, mas esse pipeline apresenta dificuldades reais de implementação dentro de ambientes empresariais. Geralmente temos uma equipe múltipla envolvida na construção de um projeto e que atuam de maneira muito diferente, e isso pode gerar ruídos.

Por isso o DevOps é importante, criar um ambiente de trabalho colaborativo e ágil. Trata-se de uma modificação cultural muito mais do que implementação de ferramentas.

- feedback contínuo
- melhoria contínua
- aprendizagem contínua

Existem três livros interessantes que podemos citar como referência:

Continuous Delivery, Jez Humble e David Farley
DevOps HandBook, múltiplos autores
DevOps, Casa do Código

#################################################

Release Antipatterns

Antipatterns
	1- Gerenciamento manual de ambientes -> Resultado: Deploy não confiável)
	Regra - Todos os ambientes são tratados como código, versionados e criados de maneira automarizada.
	2- Deploy manual -> Resultado: Deploy lento, propício a erro, não confiável
	Regra - Duas tarefas devem ser executadas manualmente:
				1- escolher a versão do release
				2- click no "deploy button"
	3- Deploy apenas no fim do ciclo -> Resultado: pouca colaboração, problemas só aparecem no dia da publicação, não confiável nem rápido, achismo
	Regra - deployment faz parte do desenvolvimento desde a primeira iteração, todos definem um delivery team

Devemos portanto ter:

Gerenciamento automatizado de ambientes
Deploy automatizado
Deploy frequente em cada ciclo de desenvolvimento

#################################################

Entrega Contínua vs Deploy Contínuo

São conceitos similares, mas a diferença reside na última etapa do pipeline de construção do software entre a homologação e produção.

Na entrega contínua as modificações e atualizações não são enviadas prontamente para a produção, isto é, ficam "paradas" na homologação. Não existe uma razão técnica para segurar estas alterações, elas são de fato seguras e funcionais, mas os motivos envolvem estratégias de negócio.

Por exemplo, uma empresa deseja lançar um conjunto de features novas para o cliente em um evento especial de vendas

No caso do deploy contínuo, as modificações vão de fato para o ambiente de produção. 

#################################################

O que aprendemos?

omeçamos a definir a Entrega Contínua (Continuous Delivery) e entender a diferença entre Entrega Contínua e Deploy Contínuo (Continuous Deploy).

A entrega contínua:

- Visa diminuir todo o risco do deploy através de deploys frequentes e bem testados
- Normalmente é implementada através de um pipeline de entrega do software
	- O pipeline representa o fluxo contínuo das alterações (valor) do código até o ambiente de produção
- Visa automatizar todo o processo do deploy e aplicar cada alteração
- O Deploy Contínua coloca qualquer alteração em produção
- A Entrega Contínua não coloca qualquer alteração em produção, mas só por motivos de negócio

#################################################

Antes da Entrega Contínua

Definimos a entrega contínua e definimos seu elemento mais importante: o pipeline ue garante a entrega de valor para o cliente.

Descobriremos qual é a base para começar a implementar esta metodologia em nosso ambiente de trabalho. Quais são os princípios e fundamentos da entrega contínua?

Primeiramente precisamos começar com a integração contínua, que já estudamos no curso anterior, e as regras de outro desse processo são:

- Build automatizado
- Testes contínuos
- Gerenciamento de configuração

Devemos realizar builds automatizados a fim de minimizar erros no processo, além de realizar testes contínuos de escalas diferentes que sejam claros e significativos e criar ambientes fáceis de reproduzir em qualquer máquina.

Antes de pensarmos em entrega contínua já teremos várias etapas anteriores que devem ser respeitados. Devemos lembrar que integração contínua não é o uso de uma ferramenta de gestão específica ou geração de relatórios, mas uma metodologia ágil que envolve alguns pressupostos, como master "deployavel".

Feito isso a equipe pode tentar estender o servidor de integração em uso e criar uma pipeline, mas neste caso existem alguns princípios arquiteturais que devemos aplicar.

#################################################

Princípios

Entregar software com alta qualidade e grande valor, de maneira eficiente, rápida e confiável"

A métrica principal é o software executável que satisfaz o cliente. O deploy não deve ser algo complexo ou extraordinário, sim algo simples,fácil e de baixo risco.

Vejamos os princípios básicos da entrega contínua:

I. Automatize
II. Versione
III. Repita
IV. Garanta qualidade
V. Defina "done"
VI. Crie delivery team
VII. Use melhoria contínua

Automatizar também faz parte da integração contínua, como ja frisamos diversas vezes. Versionar é importante não só para o código, mas tudo que é relacionado aos ambientes e testes. É importante repetir o deploy, não devemos deixar para realizá-lo no fim de semana depois de três alterações.

Devemos garantir a qualidade, se há algum temor de colocar o código em produção é porque os testes não forneceram a segurança necessária.

É importante definir o "done" corretamente. Não basta ter algo comitado e testado, "done" significa "em produção". Devemos, ainda, criar uma equipe de entrega com desenvolvedores, analistas, operation e assim por diante. Uma equipe multifuncional garantirá o sucesso do projeto.

Devemos utilizar a melhoria contínua, isto é, que cada etapa do pipeline tenha feedbacks rápidos sobre o estaus do software.

Estes são os princípios da entrega contínua.

#################################################

Elementos principais

1. Cultura DevOps Ela envolve: feedback, colaboração, confiança, melhoria e aprendizagem contínua.

2. Patterns São os padrões de deploy, ou releases de baixo risco. Nós ainda discutiremos esse assunto ao longo do curso, alguns padrões são blue/green, canary, feature toggle e outros.

3. Arquitetura A arquitetura é uma fase importante, pois quando falamos sobre arquitetura estamos mencionando a estrutura do sistema. As decisões estruturais são as mais difíceis dentro de um projeto, é necessário que ela seja estipulada no começo do trabalho. Quando pensamos na arquitetura queremos definir testabilidade, estabilidade, desempenho e outras propriedades como deployability.

Quanto melhor for a arquitetura do sistema, mais fácil será praticarmos entrega contínua. Se existem dificuldades em recriar o ambiente de produção isso influencia a testabilidade, afinal devemos criar um clone da produção para que o teste seja possível.

O mesmo se dá com o deployability. Se a base de código é muito grande, sentiremos dificuldade em inserir elementos na fase de produção. Nesta fase entram as boas práticas e os serviços e uma melhor base de dados.

#################################################

O que aprendemos?

Nesta aula, aprendemos sobre os fundamentos e princípios da Entrega Contínua:

- Vimos que a base da Entrega Contínua é a Integração Contínua
- Vimos os princípios, que são:
	- Automatize
	- Versione
	- Repita
	- Garanta a qualidade
	- Defina o "done"
	- Crie o delivery team
	- Use melhoria contínua
	
Além disso, falamos os elementos mais importantes para implementar a entrega contínua, como a cultura DevOps, Pattern de deployment e mudanças arquiteturais.

#################################################

Etapas do pipeline

Conheceremos as etapas clássicas do deploy.

1. Build

O começo de tudo é build, isto é o desenvolvedor vai construir o software.

2. Testes de aceitação automatizados

Depois da construção do software são executados os testes necessários. Por meio dos testes criamos relatórios sobre a qualidade do sistema. Se alguma etapa falhar ela é congelada por aqui e o artefato não é promovido.

3 Homologação UAT A próxima etapa - caso tudo ocorra como o esperado - é a promoção do artefato. Este é o ambiente classico de User Acceptance Testing, ou simplesmente homologação. Nesta fase não executados os testes mais complexos que não podem ser automatizados.

4. Produção

Depois da aprovação manual, iremos para o ambiente de produção, em que o artefato será de fato produzido de maneira segura.

Cada etapa citada constrói mais confiança no produto.Os testes não garantem tudo, mas diminuímos muito a probabilidade de erros. O ambiente de homologação deve ser o mais perecido o possível com o de produção para garantirmos a eficiência do deploy.

Nesse processo podem ter outras etapas. 

O pipeline representa o processo de produção específico de uma equipe ou empresa, portanto não temos um padrão rígido.

O processo de pipeline se inicia a cada comit que é testado separadamente. Nesta etapa os desenvolvedores utilizam ferramentas como Slack ou Telegram para se comunicarem sobre o estado do build, e se acontece algum problema toda a equipe é responsável.

#################################################

Boas práticas

Lembremos as etapas clássicas do pipeline: build unit test, AAT, UAT e Produção. A pipeline é a única forma de realizar o deploy, assim chegamos em um estado seguro para o ambiente de produção. Outro ponto importante é o que o pipeline deve ser ágil, isto é, o seu desempenho dever ser satisfatório na resolução de problemas.

O build é a primeira etapa do projeto, e deve ser executado apenas uma vez, e sempre devemos utilizar o artefato inicial para evitar incompatibilidades.

O build em si deveria ser independente do ambiente, ou seja, o software não deve levar configurações hardcode. Já mencionamos também que os ambientes de homologação devem ser semelhantes ao ambiente de produção.

Os ambientes devem ser efêmeros, isto é, temporários. Não é uma ação sempre fácil de ser realizada em todos os projetos, mas é algo interessante, pois podemos criar cenários limpos para novos testes, afinal quando executamos um teste devemos criar um cenário para ele, e então analisar o comportamento do software.

Devemos garantir que o deploy para ambientes sempre seja igual, e esse escript que dará segurança ao pipeline. Idealmente devemos sempre utilizar a mesma maneira de deploy para cada fase do projeto.

Essas são algumas boas práticas da entrega contínua.

#################################################

O que aprendemos?

Nesta aula, começamos a ver mais detalhes sobre o deployment pipeline. Vimos os stages (etapas) principais de um pipeline, que são:

- Build/Commit stage
- Automated Acceptance Testing Stage (Testes de aceitação)
- User Acceptance Testing Stage (Homologação)

As etapas build e AAT são totalmente automatizadas. UAT é manual.

As etapas existem pois queremos receber feedback o mais rápido possível, ou seja, executamos os testes rápidos bem no início do pipeline.

Também falamos sobre algumas boas práticas na construção e execução do pipeline:

- O pipeline é a única forma de deploy
- O desempenho do pipeline importa, ou seja, otimize-o
- Build do artefato no início e apenas uma vez
- O build deve ser independente do ambiente
- Ambientes deve ser iguais ou muito semelhantes ao de produção
- Use ambientes efêmeros (temporários) onde puder
- O deploy deve ser executado igual para qualquer ambiente

#################################################

Commit Stage

A pipeline é a única forma de realizar o deploy, assim chegamos em um estado seguro para o ambiente de produção. Outro ponto importante é o que o pipeline deve ser ágil, isto é, o seu desempenho dever ser satisfatório na resolução de problemas.

O build é a primeira etapa do projeto, e deve ser executado apenas uma vez, e sempre devemos utilizar o artefato inicial para evitar incompatibilidades.

O build em si deveria ser independente do ambiente, ou seja, o software não deve levar configurações hardcode. Já mencionamos também que os ambientes de homologação devem ser semelhantes ao ambiente de produção.

Os ambientes devem ser efêmeros, isto é, temporários. Não é uma ação sempre fácil de ser realizada em todos os projetos, mas é algo interessante, pois podemos criar cenários limpos para novos testes, afinal quando executamos um teste devemos criar um cenário para ele, e então analisar o comportamento do software.

Devemos garantir que o deploy para ambientes sempre seja igual, e esse escript que dará segurança ao pipeline. Idealmente devemos sempre utilizar a mesma maneira de deploy para cada fase do projeto.

Essas são algumas boas práticas da entrega contínua.

#################################################

Stage de testes de aceitação

Testes de aceitação automatizados

Nesta fase queremos testar a aplicação inteira e avaliar se ela preenche os requisitos de negócio. Esta é uma etapa essencial para chegar ao deploy contínuo e inserir a aplicação na fase de produção de maneira segura.

Diferente dos testes de unidade, esse tipo de teste garante que as funcionalidades em conjunto estejam plenamente operantes e antederão o requisito do cliente. Tais testes são caros e trabalhosos, portanto é fácil de pular esta etapa devido ao seu custo e dificuldade.

Vamos utilizar um exemplo concreto: imagine que façamos uma refatoração na base do código e vários pontos são modificados. Neste momento, vários testes irão quebrar, por isso que a base de testes também deve ser atualizada, e neste momento como podemos garantir que um novo bug não foi criado?

Os testes de aceitação acessam a interface do software, como seria a experiência de usuário, e a ferramenta clássica para esta etapa é o Selenium. O teste de aceitação fornece uma garantia maior do ponto de vista do usuário.

Neste teste, a primeira fase é nosso artefato está disponibilizado em um repositório, e caso tudo tenha ocorrido certo o pipeline é notificado e sistemas como Jekings fazem o papel necessário nesta fase.

O ambiente precisa ser todo configurado, e ele precisa ser o similar ao ambiente de produção. Esta etapa é fundamental, porque se não ocorrem erros aqui a chance de algum imprevisto se dar na etapa de produção é muito reduzida.

Antes de executarmos todos os testes - já que são demorados - faremos o que é conhecido como smoke tests, testes menores que garantirão que as partes fundamentais da aplicação estão operantes.

O resultado dessa operação é um relatório que notificará a equipe do status da aplicação. Esta é uma etapa muito importante, afinal é a última fase dos testes automatizados, em seguida teremos uma maior presença humana.

Em resumo:

- esquipe define as especificações (analistas,qa,dev)
- responsabilidade a equipe
- smoke tests para o ambiente
- mock de sistemas externos
- bons requisitos
- boas práticas no design e implementação de testes
- desempenho não é o mais importante

A responsabilidade da definição do teste é divida entre toda equipe, assim como a correção de erros. Para garantir que o ambiente está adequado, devemos realizar um conjunto de pequenos testes dos rescursos principais. Precisamos de bons resiqusitos para escrever as especificações e o teste na aplicação final real. Testes de aceitação são caros de escrever e manter, por isso desde o início devemos utilizar boas práticas no momento de criá-los. O desempenho importa,claro, mas não é o mais importante, geralmente são lentos.

#################################################

O que aprendemos?

Nesta aula, definimos as etapas/stages de commit e de testes de aceitação automatizados (AAT):

- Ambas as etapas executam os testes de maneira automatizada
- O stage de commit foca nos testes de unidade e integração.
- O stage AAT foca nos testes funcionais, que testam o sistema todo, baseado em um requisito
- O commit stage deve executar rápido (menos de 10 minutos) e iniciar a cada commit
- O stage AAT inicia quando commit stage foi executado com sucesso
- O stage AAT é mais demorado

Os testes de aceitação são mais caros de escrever e manter, mas trazem muito valor, pois testam o sistema todo. Os testes de aceitação são escritos pela equipe inteira (analista, desenvolvedor, etc).

Quando um build quebra, todos são responsáveis. Consertar o problema é prioridade da equipe.

#################################################

Stage de homologação

terceira fase do pipeline: homologação. A questão principal é de como podemos garantir o pleno funcionamento da aplicação de acordo com a expectativa do cliente.

Nesta fase os testes são executados pelo cliente, isto é, um usuário real do produto utiliza a interface do software, por isso essa etapa também é conhecida como "teste de aceitação".

A etapa de homologação não é tão precisa, não existe sempre uma completa aceitação ou rejeição por parte do usuário, mas pontos que precisam ser melhorados ou mantidos dentro do sistema.

Como existem várias pessoas envolvidas no projeto, cada uma terá uma visão diferente de negócio, e então com os feedbacks pequenas - ou grandes - mudanças serão requeridas.

Devemos lembrar que:

"Our highest priority is to satisfy the customer through early and continuous delivery of valuable software".

Isto é, a máxima prioridade é satisfazer o cliente ao oferecermos um produto com valor e aplicação. Em resumo, esta etapa contém:

*- Testes manuais pelo cliente * O cliente consegue usar o sistema de acordo com o esperado? Realiza as ações requisitadas? Apresenta dificuldade

- Validar o software

- Usabilidade contínua

- Equipe participativa

Trata-se de um universo amplo: construção do modelo de estes, recriação do ambiente de produção e assim por diante, mas estes são os pontos principais testa etapa do pipeline.

#################################################

Stage de teste de carga

A todo tempo falamos das quatro etapas do pipeline de deploy e que uma boa prática é não permitir que ela cresça demais horizontalmente, isto é, devemos focar nestas 4 etapas.

Em paralelo a homologação, podemos executar o "Capacity Testing Stage". A pergunta que queremos responder é: como garantir que o software realmente suporta a quantidade de requisições, transações e acessos de usuários?

Criar esses cenários é algo complexo, existem ferramentas disponíveis e este é um conteúdo para um curso específico. O cenário de produção é algo dinâmico, pois precisamos pensar e reproduzir o comportamento dos usuários.

Os testes de carga buscam descobrir qual é a real capacidade do nosso sistema, ou seja, seu baseline. Conhecendo nosso sistema, devemos estabelecer metas claras e utilizar ferramentas de monitoração para descobrir as modificações arquiteturais que são necessárias.

Estes testes são mais caros devido a sua complexidade. Na fase de homologação não precisamos rodar a cada commit ou build, mas que o projeto seja monitorado desde o início. Podemos começar pelos testes de aceitação e criar um cenário, para elaborar os testes de carga ou fazer um replay dos dados de reprodução: gravamos o comportamento das requisições e realizamos um replay desses dados. Algumas ferramentas que podemos utilizar para isto são JMeter, Getling, Webbload, Apache Bench, LoadNinja.

Mesmo depois de passarmos para a produção, ainda existem riscos possíveis, e este problema trabalharemos nas próximas aulas.

#################################################

O que aprendemos?

Nesta aula, falamos sobre os stages que possuem uma aprovação humana:

- Homologação (User Acceptance Testing Stage)
- Teste de carga (Capacity Testing Stage)

O ambiente de homologação serve para o usuário final validar se o software atende aos requisitos e expectativas. A equipe deve participar nesses testes e eles representam uma oportunidade de aprender e receber feedback sobre a aceitação e usabilidade do software. Esses testes devem ser executadas desde início do projeto.

O ambiente para testes de carga serve para garantir que o software atende os requisitos não funcionais, como desempenho e carga. Os testes devem fazer parte do desenvolvimento do software e ser aplicados em ciclos. Aqui, é importante definir métricas claras e monitorar o sistema.

#################################################