#################################################

A Entrega Contínua e todos os conceitos e práticas relacionados são bastante discutidos na literatura e web em geral, devido a sua importância.

Seguem algumas fontes que usamos para criar este curso:

- Livro Continuous Delivery, do Jez Humble -> https://www.amazon.com.br/Continuous-Delivery-Deployment-Automation-Addison-Wesley-ebook/dp/B003YMNVC0
- Livro DevOps Handbook, do Gene Kim -> https://www.amazon.com.br/DevOps-Handbook-World-Class-Reliability-Organizations-ebook/dp/B01M9ASFQ3/
- Livro DevOps, da Casa do Código, do Danilo Sato -> https://www.casadocodigo.com.br/products/livro-devops

- Artigo da ThoughtWorks: Continuous integration -> https://www.thoughtworks.com/pt/continuous-integration
- Série de artigos do Martin Fowler sobre Entrega Contínua: Software Delivery Guide -> https://martinfowler.com/delivery.html
- Série de artigos da Caelum:
	- Branches e integração contínua: o problema de feature branches -> https://blog.caelum.com.br/branches-e-integracao-continua-o-problema-de-feature-branches/
	- Integração Contínua - Builds rápidos com Grids e paralelismo -> https://blog.caelum.com.br/integracao-continua-builds-rapidos-com-grids-e-paralelismo/
	- Integração contínua: deploys e aprovações sem dor de cabeça para o cliente -> https://blog.caelum.com.br/integracao-continua-deploys-e-aprovacoes-sem-dores-de-cabeca-para-o-cliente/

- Artigos sobre Entrega Contínua e padrões relacionados, do Jez Humble -> https://continuousdelivery.com/

#################################################

Diminuindo risco

Não devemos fazer o deploy ser um evento raro e demorado, mas sim um processo natural e frequente no projeto.

Devemos lembrar que a prioridade número um de uma equipe é deixar o cliente satisfeito, com um projeto funcional e com entrega contínua carregada de valor.

Devemos, portanto, realizar deploys frequentes e preferencialmente automatizados e com feedbacks rápidos, como manda o processo ágil. 

Parece simples, mas esse pipeline apresenta dificuldades reais de implementação dentro de ambientes empresariais. Geralmente temos uma equipe múltipla envolvida na construção de um projeto e que atuam de maneira muito diferente, e isso pode gerar ruídos.

Por isso o DevOps é importante, criar um ambiente de trabalho colaborativo e ágil. Trata-se de uma modificação cultural muito mais do que implementação de ferramentas.

- feedback contínuo
- melhoria contínua
- aprendizagem contínua

Existem três livros interessantes que podemos citar como referência:

Continuous Delivery, Jez Humble e David Farley
DevOps HandBook, múltiplos autores
DevOps, Casa do Código

#################################################

Release Antipatterns

Antipatterns
	1- Gerenciamento manual de ambientes -> Resultado: Deploy não confiável)
	Regra - Todos os ambientes são tratados como código, versionados e criados de maneira automarizada.
	2- Deploy manual -> Resultado: Deploy lento, propício a erro, não confiável
	Regra - Duas tarefas devem ser executadas manualmente:
				1- escolher a versão do release
				2- click no "deploy button"
	3- Deploy apenas no fim do ciclo -> Resultado: pouca colaboração, problemas só aparecem no dia da publicação, não confiável nem rápido, achismo
	Regra - deployment faz parte do desenvolvimento desde a primeira iteração, todos definem um delivery team

Devemos portanto ter:

Gerenciamento automatizado de ambientes
Deploy automatizado
Deploy frequente em cada ciclo de desenvolvimento

#################################################

Entrega Contínua vs Deploy Contínuo

São conceitos similares, mas a diferença reside na última etapa do pipeline de construção do software entre a homologação e produção.

Na entrega contínua as modificações e atualizações não são enviadas prontamente para a produção, isto é, ficam "paradas" na homologação. Não existe uma razão técnica para segurar estas alterações, elas são de fato seguras e funcionais, mas os motivos envolvem estratégias de negócio.

Por exemplo, uma empresa deseja lançar um conjunto de features novas para o cliente em um evento especial de vendas

No caso do deploy contínuo, as modificações vão de fato para o ambiente de produção. 

#################################################

O que aprendemos?

omeçamos a definir a Entrega Contínua (Continuous Delivery) e entender a diferença entre Entrega Contínua e Deploy Contínuo (Continuous Deploy).

A entrega contínua:

- Visa diminuir todo o risco do deploy através de deploys frequentes e bem testados
- Normalmente é implementada através de um pipeline de entrega do software
	- O pipeline representa o fluxo contínuo das alterações (valor) do código até o ambiente de produção
- Visa automatizar todo o processo do deploy e aplicar cada alteração
- O Deploy Contínua coloca qualquer alteração em produção
- A Entrega Contínua não coloca qualquer alteração em produção, mas só por motivos de negócio

#################################################

Antes da Entrega Contínua

Definimos a entrega contínua e definimos seu elemento mais importante: o pipeline ue garante a entrega de valor para o cliente.

Descobriremos qual é a base para começar a implementar esta metodologia em nosso ambiente de trabalho. Quais são os princípios e fundamentos da entrega contínua?

Primeiramente precisamos começar com a integração contínua, que já estudamos no curso anterior, e as regras de outro desse processo são:

- Build automatizado
- Testes contínuos
- Gerenciamento de configuração

Devemos realizar builds automatizados a fim de minimizar erros no processo, além de realizar testes contínuos de escalas diferentes que sejam claros e significativos e criar ambientes fáceis de reproduzir em qualquer máquina.

Antes de pensarmos em entrega contínua já teremos várias etapas anteriores que devem ser respeitados. Devemos lembrar que integração contínua não é o uso de uma ferramenta de gestão específica ou geração de relatórios, mas uma metodologia ágil que envolve alguns pressupostos, como master "deployavel".

Feito isso a equipe pode tentar estender o servidor de integração em uso e criar uma pipeline, mas neste caso existem alguns princípios arquiteturais que devemos aplicar.

#################################################

Princípios

Entregar software com alta qualidade e grande valor, de maneira eficiente, rápida e confiável"

A métrica principal é o software executável que satisfaz o cliente. O deploy não deve ser algo complexo ou extraordinário, sim algo simples,fácil e de baixo risco.

Vejamos os princípios básicos da entrega contínua:

I. Automatize
II. Versione
III. Repita
IV. Garanta qualidade
V. Defina "done"
VI. Crie delivery team
VII. Use melhoria contínua

Automatizar também faz parte da integração contínua, como ja frisamos diversas vezes. Versionar é importante não só para o código, mas tudo que é relacionado aos ambientes e testes. É importante repetir o deploy, não devemos deixar para realizá-lo no fim de semana depois de três alterações.

Devemos garantir a qualidade, se há algum temor de colocar o código em produção é porque os testes não forneceram a segurança necessária.

É importante definir o "done" corretamente. Não basta ter algo comitado e testado, "done" significa "em produção". Devemos, ainda, criar uma equipe de entrega com desenvolvedores, analistas, operation e assim por diante. Uma equipe multifuncional garantirá o sucesso do projeto.

Devemos utilizar a melhoria contínua, isto é, que cada etapa do pipeline tenha feedbacks rápidos sobre o estaus do software.

Estes são os princípios da entrega contínua.

#################################################

Elementos principais

1. Cultura DevOps Ela envolve: feedback, colaboração, confiança, melhoria e aprendizagem contínua.

2. Patterns São os padrões de deploy, ou releases de baixo risco. Nós ainda discutiremos esse assunto ao longo do curso, alguns padrões são blue/green, canary, feature toggle e outros.

3. Arquitetura A arquitetura é uma fase importante, pois quando falamos sobre arquitetura estamos mencionando a estrutura do sistema. As decisões estruturais são as mais difíceis dentro de um projeto, é necessário que ela seja estipulada no começo do trabalho. Quando pensamos na arquitetura queremos definir testabilidade, estabilidade, desempenho e outras propriedades como deployability.

Quanto melhor for a arquitetura do sistema, mais fácil será praticarmos entrega contínua. Se existem dificuldades em recriar o ambiente de produção isso influencia a testabilidade, afinal devemos criar um clone da produção para que o teste seja possível.

O mesmo se dá com o deployability. Se a base de código é muito grande, sentiremos dificuldade em inserir elementos na fase de produção. Nesta fase entram as boas práticas e os serviços e uma melhor base de dados.

#################################################

O que aprendemos?

Nesta aula, aprendemos sobre os fundamentos e princípios da Entrega Contínua:

- Vimos que a base da Entrega Contínua é a Integração Contínua
- Vimos os princípios, que são:
	- Automatize
	- Versione
	- Repita
	- Garanta a qualidade
	- Defina o "done"
	- Crie o delivery team
	- Use melhoria contínua
	
Além disso, falamos os elementos mais importantes para implementar a entrega contínua, como a cultura DevOps, Pattern de deployment e mudanças arquiteturais.

#################################################

Etapas do pipeline

Conheceremos as etapas clássicas do deploy.

1. Build

O começo de tudo é build, isto é o desenvolvedor vai construir o software.

2. Testes de aceitação automatizados

Depois da construção do software são executados os testes necessários. Por meio dos testes criamos relatórios sobre a qualidade do sistema. Se alguma etapa falhar ela é congelada por aqui e o artefato não é promovido.

3 Homologação UAT A próxima etapa - caso tudo ocorra como o esperado - é a promoção do artefato. Este é o ambiente classico de User Acceptance Testing, ou simplesmente homologação. Nesta fase não executados os testes mais complexos que não podem ser automatizados.

4. Produção

Depois da aprovação manual, iremos para o ambiente de produção, em que o artefato será de fato produzido de maneira segura.

Cada etapa citada constrói mais confiança no produto.Os testes não garantem tudo, mas diminuímos muito a probabilidade de erros. O ambiente de homologação deve ser o mais perecido o possível com o de produção para garantirmos a eficiência do deploy.

Nesse processo podem ter outras etapas. 

O pipeline representa o processo de produção específico de uma equipe ou empresa, portanto não temos um padrão rígido.

O processo de pipeline se inicia a cada comit que é testado separadamente. Nesta etapa os desenvolvedores utilizam ferramentas como Slack ou Telegram para se comunicarem sobre o estado do build, e se acontece algum problema toda a equipe é responsável.

#################################################